name: API Testing

on:
  push:
    branches: [main]
    paths:
      - 'server/**'
  pull_request:
    branches: [main]
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  test-server-endpoints:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Build server
        run: npm run build
        
      - name: Start server for testing
        run: |
          echo "Starting server..."
          npm start &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"
          
          # Wait for server to be ready (up to 30 seconds)
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:1000/health > /dev/null 2>&1; then
              echo "Server is ready after ${i} seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start within 30 seconds"
              echo "Checking server logs..."
              jobs
              ps aux | grep node
              exit 1
            fi
            echo "Attempt $i: Server not ready yet, waiting..."
            sleep 1
          done
        env:
          MongoDB_URI: ${{ secrets.MONGODB_URI }}
          AV_API: ${{ secrets.AV_API }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          
      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:1000/health || exit 1
          
          echo "Testing stocks endpoint..."
          curl -f http://localhost:1000/stocks || exit 1
          
          echo "Testing specific stock endpoint..."
          curl -f http://localhost:1000/stocks/AAPL || exit 1
          
          echo "All API tests passed! âœ…"
          
      - name: Create issue on API failure
        if: failure()
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-issue"
          title: "ðŸš¨ API Tests Failed - ${{ github.sha }}"
          body: |
            **API Endpoint Testing Failed**
            
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            - **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Time**: ${{ github.event.head_commit.timestamp }}
            
            **Failed Endpoints:**
            - `/health` - Health check endpoint
            - `/stocks` - All stocks endpoint  
            - `/stocks/AAPL` - Individual stock endpoint
            
            **Possible Issues:**
            - Server startup failures
            - Database connection problems
            - Environment variable issues
            - API key configuration
            
            @${{ github.actor }}